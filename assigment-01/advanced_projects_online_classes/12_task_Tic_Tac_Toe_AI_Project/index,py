import math
import time

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    for row in board:
        if all(s == player for s in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def available_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == " "]

def minimax(board, depth, is_maximizing):
    if check_winner(board, "O"):
        return 1
    elif check_winner(board, "X"):
        return -1
    elif not available_moves(board):
        return 0
    
    if is_maximizing:
        best_score = -math.inf
        for move in available_moves(board):
            board[move[0]][move[1]] = "O"
            score = minimax(board, depth + 1, False)
            board[move[0]][move[1]] = " "
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for move in available_moves(board):
            board[move[0]][move[1]] = "X"
            score = minimax(board, depth + 1, True)
            board[move[0]][move[1]] = " "
            best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None
    for r, c in available_moves(board):
        board[r][c] = "O"
        score = minimax(board, 0, False)
        board[r][c] = " "
        if score > best_score:
            best_score = score
            move = (r, c)
    return move

def main():
    board = [[" " for _ in range(3)] for _ in range(3)]
    player = "X"
    
    while True:
        print_board(board)
        if player == "X":
            row, col = map(int, input("Enter row and column (0-2): ").split())
        else:
            time.sleep(1)
            row, col = best_move(board)
            print(f"AI chooses: {row}, {col}")
        
        if board[row][col] == " ":
            board[row][col] = player
        else:
            print("Invalid move, try again!")
            continue
        
        if check_winner(board, player):
            print_board(board)
            print(f"{player} wins!")
            break
        
        if not available_moves(board):
            print_board(board)
            print("It's a tie!")
            break
        
        player = "O" if player == "X" else "X"

if __name__ == "__main__":
    main()
